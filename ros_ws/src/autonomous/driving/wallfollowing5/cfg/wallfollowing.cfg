#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "wallfollowing5"

gen = ParameterGenerator()

gen.add(
    "usable_laser_range",               # name
    double_t,                           # type
    0,                                  # config level
    "Specifies the laser range that is used in degree.",        # description
    240,                                # default
    0.0001,                             # min
    270                                 # max
)

gen.add(
    "usable_laser_range_wall_detection",
    double_t,                           
    0,                                  
    "Specifies the laser range that is used in degree for the wall detection step.",
    200,
    0.0001,
    270
)

gen.add(
    "target_method",
    int_t,
    0,
    "Defines the used method to dermine the target position - 0: TRACK_CENTER, 1: CIRCLE_TANGENTS, 2: CENTER_PATH",
    0,
    0,
    2
)

gen.add(
    "use_voxel",
    bool_t,
    0,
    "Enable the use of voxel or the direct lidar points.",
    False
)

gen.add(
    "use_obstacle_avoidence",
    bool_t,
    0,
    "Enable the use of an obstacle avoidence algorithm based on the distance of obstacles to the target path.",
    False
)

gen.add(
    "safety_wall_distance",
    double_t,
    0,
    "Specifies the min distance to the walls which shouldn't be undercut.",
    0.3,
    0.0001,
    2
)

gen.add(
    "max_predicted_distance",
    double_t,
    0,
    "Specifies the max predicted distance to determine the target position.",
    1.0,
    0.0001,
    10
)

gen.add(
    "emergency_slowdown",
    bool_t,
    0,
    "Enable the emergency slowdown which is activated in steep curves.",
    True
)

gen.add(
    "advanced_trajectory",
    double_t,
    0,
    "Percentage that the car drives on the right side of the track when it approaches a left curve and vice versa.",
    0,
    0,
    1
)

gen.add(
    "advanced_trajectory_distance",
    double_t,
    0,
    "Distance for correction factor for the advanced trajectory.",
    0,
    0,
    20
)

gen.add(
    "radius_curve_entry_proportion",
    double_t,
    0,
    "Radius proportion to detect if a curve entry is in front.",
    1.1,
    0,
    3
)

gen.add(
    "max_speed",
    double_t,
    0,
    "Specifies the max possible speed for the car.",
    2.5,
    0.0001,
    20
)

gen.add(
    "min_possible_steering_angle",
    double_t,
    0,
    "Specifies the min possible steering value (0, 0.99) that the car should be able to steer at every speed.",
    0.05,
    0.0001,
    0.99
)

gen.add(
    "max_steering_angle",
    double_t,
    0,
    "Max steering angle of the car in degrees.",
    1,
    0.0001,
    50
)

gen.add(
    "brake_safety_margin",
    double_t,
    0,
    "Distance before curve entry before car brakes.",
    0.45,
    0.0001,
    2
)

gen.add(
    "pid_p",
    double_t,
    0,
    "Specifies the p of the PID-Controller.",
    1.0,
    0.0001,
    10
)

gen.add(
    "pid_i",
    double_t,
    0,
    "Specifies the i of the PID-Controller.",
    0.1,
    0.0001,
    10
)

gen.add(
    "pid_d",
    double_t,
    0,
    "Specifies the d of the PID-Controller.",
    0.025,
    0.0001,
    10
)

gen.add(
    "anti_windup",
    double_t,
    0,
    "Specifies the anti_windup of the PID-Controller.",
    0.2,
    0.0001,
    10
)

exit(gen.generate(PACKAGE, "wallfollowing5", "wallfollowing5"))
