<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="world" default="racetrack_decorated_2"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="true"/>
    <arg name="use_gpu" default="true"/>
    <arg name="joystick_type" default="xbox360"/>
    <arg name="visualize_lidar" default="false"/>
    <arg name="emergency_stop" default="true"/>
    <arg name="record" default="false"/>
    <arg name="videohd" default="false"/>

    <!-- Mode Override
        1 forces manual driving
        2 forces autonomous driving
        0 uses user input to enable the modes
    -->
    <arg name="mode_override" default="0"/>

    <param name="world_name" value="$(arg world)"/>

    <!-- Include racer with 720p camera -->
    <group if="$(arg videohd)">
        <include file="$(find racer_world)/launch/racer_gazebo_720.launch">
            <arg name="world" value="$(arg world)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="debug" value="$(arg debug)"/>
            <arg name="verbose" value="$(arg verbose)"/>
            <arg name="use_gpu" value="$(arg use_gpu)"/>
            <arg name="visualize_lidar" value="$(arg visualize_lidar)"/>
        </include>
    </group>

    <!-- Include racer with VGA camera -->
    <group unless="$(arg videohd)">
        <include file="$(find racer_world)/launch/racer_gazebo.launch">
            <arg name="world" value="$(arg world)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="debug" value="$(arg debug)"/>
            <arg name="verbose" value="$(arg verbose)"/>
            <arg name="use_gpu" value="$(arg use_gpu)"/>
            <arg name="visualize_lidar" value="$(arg visualize_lidar)"/>
        </include>
    </group>
    
    <!-- transform laserscan to cartesian -->
    <include file="$(find car_tf)/launch/car_transformer.launch" />

    <!-- zed camera launch file WVGA -->
    <!--<include file="./launch/zed.launch"/>-->

    <!-- zed camera launch file 720p -->
    <!--<include file="./launch/zed_720.launch"/>-->

    <!-- laserscan from kinect -->
    <!--<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" respawn="true">
        <param name="scan_height" value="5"/> 
        <param name="scan_time" value="0.0333"/>  
        <param name="range_min" value="0.3"/>  
        <param name="range_max" value="20"/> 
        <remap from="scan" to="scan_camera"/>
        <param name="output_frame_id" value="laser"/>
        <remap from="image" to="/racer/camera1/depth/image_raw"/>
    </node>--> <!-- we convert this laserscan back to a pointcloud for easier merging -->
    <include file="$(find car_tf)/launch/car_transformer.launch">
        <arg name="topic_input" value="/scan_camera" />
        <arg name="topic_output" value="/scan/cam/cartesian" />
    </include>
    <!-- why the hassle you may ask...
         the depthimage_to_laserscan package offers a lot of options which are really useful for our case.
         if it turns out that this conversion is to computationally intensive, we have to find another way
         e.g. directly use the cameras pointcloud. we may have to do that in the future anyways...
        -->
    <!-- <include file="$(find cam_lidar_fusion)/launch/cam_lidar_fusion.launch">
        <arg name="topic_input_cam" value="/scan/cam/cartesian"/>
        <arg name="topic_input_lidar" value="/scan/lidar/cartesian"/>
        <arg name="topic_output_fused" value="/scan/fusion/cartesian"/>
    </include> -->
    
    <include file="$(find boxing)/launch/boxing.launch">
        <arg name="topic_input_cloud" value="/scan/fusion/cartesian" />
        <arg name="topic_input_colored_cloud" value="/racer/camera1/depth/points" />
        <arg name="topic_voxels" value="/scan/voxels" />
    </include>

    <include file="$(find avoid_static_obstacles)/launch/avoid_static_obstacles.launch"/>

    <include file="$(find voxel_classifier)/launch/voxel_classifier.launch">
        <arg name="topic_input_voxels" value="/scan/voxels" />
        <arg name="topic_output_clusters" value="/scan/clusters" />
    </include>

    <include file="$(find wall_detection)/launch/wall_detection.launch">
        <arg name="topic_input_clusters" value="/scan/clusters" />
        <arg name="topic_output_walls" value="/obstacles/walls" />
        <arg name="topic_output_obstacles" value="/obstacles/obstacles" />
    </include>

    <node name="lap_timer" pkg="simulation_tools" type="lap_timer.py" output="screen"/>
    <node pkg="gazebo_telemetry" type="gazebo_state_telemetry.py" name="gazebo_state_telemetry" respawn="true" output="screen"/>
    
    <!-- wallfollowing start - please enable only one -->
    <!-- current implementation -->
    <include file="$(find wallfollowing5)/launch/autonomous_driving_physical.launch"/>
    <!--<include file="$(find wallfollowing5)/launch/autonomous_driving.launch"/>-->
    
    <!-- former implementation of previous group -->
    <!--<include file="$(find wallfollowing2)/launch/autonomous_driving.launch"/>-->
    <!-- wallfollowing end -->
    
    <group if="$(arg emergency_stop)">
        <include file="$(find emergency_stop)/launch/emergency_stop.launch"/>
    </group>

    <include file="$(find vesc_sim)/launch/vesc_sim.launch"/>
    <include file="$(find car_control)/launch/car_control.launch">
        <arg name="mode_override" value="$(arg mode_override)"/>
    </include>
    <include file="$(find teleoperation)/launch/remote_control.launch">
        <arg name="joystick_type" value="$(arg joystick_type)"/>
    </include>

    <!--<include file="$(find imu_velocity)/launch/car_imu_velocity.launch" />-->

    <node pkg="car_config" type="dynamic_physical_properties" name="dynamic_physical_properties" respawn="true" output="screen"/>

    <node pkg="simulation_tools" type="crash_detector" name="crash_detector" output="screen">
    </node>
    <node pkg="tf" type="static_transform_publisher" name="depth_rotation" args="0.18 0 0.14 -1.570796327 0 -1.570796327 /base_link /camera 10" />

    <!-- publishes the approximated maximal possible speed for a certain position on the track -->
    <node pkg="simulation_tools" type="speed_info" name="speed_info" respawn="true" output="screen"/>
    
    <!-- needed for logging telemetry data and provide node for rviz -->
    <!-- prefix: log prefix (string), default: none -->
    <!-- length: length for min/max arrays (int), default: 100 -->
    <!-- smooth: smoothing value of acceleration (int), default: 5 -->
    <!-- sim: whether its simulation or not (bool), default: false -->
    <!-- write: whether write statistics or not (bool), default: false -->
    <node pkg="analysis-tools" type="log_stats" name="log_stats" respawn="true" output="screen">
        <param name="prefix" value="gazebo" />
        <param name="length" value="100" />
        <param name="smooth" value="10" />
        <param name="sim" value="true" />
        <param name="write" value="true" />
    </node>
    
    <group if="$(arg record)">
        <node pkg="image_view" type="video_recorder" name="video_record_cam">
            <remap from="image" to="/racer/camera1/image_raw"/>
            <param name="fps" value="30" />
            <param name="filename" value="output-cam.avi" />
        </node>        
    </group>
    
    <!-- default rviz config -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find racer_world)/launch/rviz_config.rviz"/>
</launch>
